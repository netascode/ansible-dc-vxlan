{# Auto-generated NDFC VXLAN EVPN MSD Child Fabric Network config data structure for fabric {{ fabric_name }} #}
{
    "fabric": "{{ fabric_name }}",
    "networkName": "{{ network_name }}",
    "displayName": "{{ network_name }}",
    "networkId": "{{ ndfc.segmentId }}",
    "networkTemplate": "Default_Network_Universal",
    "networkExtensionTemplate": "Default_Network_Extension_Universal",
    "networkTemplateConfig": " {{ {
        "vrfName": ndfc.vrfName,
        "networkName": network_name,
        "vlanId": ndfc.vlanId,
        "vlanName": ndfc.vlanName,
        "segmentId": ndfc.segmentId,
        "intfDescription": ndfc.intfDescription,
        "gatewayIpAddress": ndfc.gatewayIpAddress,
        "gatewayIpV6Address": ndfc.gatewayIpV6Address,
        "mtu": ndfc.mtu,
        "isLayer2Only": ndfc.isLayer2Only,
        "suppressArp": ndfc.suppressArp,
        "mcastGroup": dm.multicast_group_address | default(ndfc.mcastGroup),
        "tag": ndfc.tag,
        "secondaryGW1": ndfc.secondaryGW1,
        "secondaryGW2": ndfc.secondaryGW2,
        "secondaryGW3": ndfc.secondaryGW3,
        "secondaryGW4": ndfc.secondaryGW4,
        "loopbackId": dm.dhcp_loopback_id | default(ndfc.loopbackId),
        "dhcpServerAddr1": dm['dhcp_servers'][0]['ip_address'] if dm['dhcp_servers'][0]['ip_address'] is defined else "",
        "vrfDhcp": dm['dhcp_servers'][0]['vrf'] if dm['dhcp_servers'][0]['ip_address'] is defined else ndfc.vrfDhcp,
        "dhcpServerAddr2": dm['dhcp_servers'][1]['ip_address'] if dm['dhcp_servers'][1]['ip_address'] is defined else ndfc.dhcpServerAddr2,
        "vrfDhcp2": dm['dhcp_servers'][1]['vrf'] if dm['dhcp_servers'][1]['ip_address'] is defined else "",
        "dhcpServerAddr3": dm['dhcp_servers'][2]['ip_address'] if dm['dhcp_servers'][2]['ip_address'] is defined else ndfc.dhcpServerAddr3,
        "vrfDhcp3": dm['dhcp_servers'][2]['vrf'] if dm['dhcp_servers'][2]['vrf'] is defined else "",
        "ENABLE_NETFLOW": dm.netflow_enable if dm.netflow_enable is defined else ndfc.ENABLE_NETFLOW,
        "SVI_NETFLOW_MONITOR": ndfc.SVI_NETFLOW_MONITOR,
        "VLAN_NETFLOW_MONITOR": dm.vlan_netflow_monitor if (dm.netflow_enable is defined and dm.netflow_enable) else ndfc.VLAN_NETFLOW_MONITOR,
        "enableIR": ndfc.enableIR,
        "trmEnabled": dm.trm_enable if dm.trm_enable is defined else ndfc.trmEnabled,
        "igmpVersion": ndfc.igmpVersion,
        "trmV6Enabled": ndfc.trmV6Enabled,
        "rtBothAuto": ndfc.rtBothAuto,
        "enableL3OnBorder": ndfc.enableL3OnBorder,
        "enableL3OnBorderVpcBgw": ndfc.enableL3OnBorderVpcBgw,
        "nveId": ndfc.nveId,
        "type": "Normal",
    } }}",
    "vrf": "{{ ndfc.vrfName }}",
    "type": "Normal",
    "hierarchicalKey": "{{ fabric_name }}"
}