{# Auto-generated NDFC VXLAN EVPN MSD Child Fabric VRF config data structure for fabric {{ fabric_name }} #}
{
    "fabric": "{{ fabric_name }}",
    "vrfName": "{{ ndfc.vrfName }}",
    "vrfTemplate": "Default_VRF_Universal",
    "vrfExtensionTemplate": "Default_VRF_Extension_Universal",
    "vrfTemplateConfig": "{{ {
      "asn": ndfc.asn,
      "nveId": ndfc.nveId,
      "vrfName": ndfc.vrfName,
      "vrfSegmentId": ndfc.vrfSegmentId,
      "vrfVlanId": ndfc.vrfVlanId,
      "vrfVlanName": ndfc.vrfVlanName,
      "vrfDescription": ndfc.vrfDescription,
      "vrfIntfDescription": ndfc.vrfIntfDescription,
      "mtu": ndfc.mtu,
      "tag": ndfc.tag,
      "vrfRouteMap": ndfc.vrfRouteMap,
      "v6VrfRouteMap": ndfc.vrfRouteMapV6 if ndfc.vrfRouteMapV6 is defined else "",
      "maxBgpPaths": ndfc.maxBgpPaths,
      "maxIbgpPaths": ndfc.maxIbgpPaths,
      "ipv6LinkLocalFlag": ndfc.ipv6LinkLocalFlag,
      "enableL3VniNoVlan": ndfc.enableL3VniNoVlan,
      "enableBgpBestPathEcmp": ndfc.enableBgpBestPathEcmp,
      "advertiseHostRouteFlag": dm.adv_host_routes | default(ndfc.advertiseHostRouteFlag),
      "advertiseDefaultRouteFlag": dm.adv_default_routes | default(ndfc.advertiseDefaultRouteFlag),
      "configureStaticDefaultRouteFlag": dm.static_default_route | default(ndfc.configureStaticDefaultRouteFlag),
      "bgpPassword": dm.bgp_password | default(ndfc.bgpPassword),
      "bgpPasswordKeyType": dm.bgp_password_encryption_type | default(ndfc.bgpPasswordKeyType),
      "ENABLE_NETFLOW": dm.enable_netflow if dm.enable_netflow is defined else ndfc.ENABLE_NETFLOW,
      "NETFLOW_MONITOR": dm.netflow_monitor if (dm.enable_netflow is defined and dm.enable_netflow) else ndfc.NETFLOW_MONITOR,
      "trmEnabled": dm.trm_enable if dm.trm_enable is defined else ndfc.trmEnabled,
      "loopbackNumber": dm.rp_loopback_id if ((dm.no_rp is defined and not dm.no_rp | default(ndfc.isRPAbsent)) or (dm.rp_external is defined and not dm.rp_external | default(ndfc.isRPExternal))) else ndfc.loopbackNumber,
      "rpAddress": dm.rp_address if (dm.no_rp is defined and not dm.no_rp) else ndfc.rpAddress,
      "isRPAbsent": dm.no_rp | default(ndfc.isRPAbsent),
      "isRPExternal": dm.rp_external | default(ndfc.isRPExternal),
      "L3VniMcastGroup": dm.underlay_mcast_ip | default(ndfc.L3VniMcastGroup),
      "multicastGroup": dm.overlay_multicast_group | default(ndfc.multicastGroup) if (dm.no_rp is defined and not dm.no_rp | default(ndfc.isRPAbsent)) else ndfc.multicastGroup,
      "trmV6Enabled": ndfc.trmV6Enabled,
      "rpV6Address": ndfc.rpV6Address if ndfc.rpV6Address is defined else "",
      "isV6RPAbsent": ndfc.isV6RPAbsent,
      "isV6RPExternal": ndfc.isV6RPExternal,
      "ipv6MulticastGroup": ndfc.ipv6MulticastGroup,
      "disableRtAuto": ndfc.disableRtAuto,
      "routeTargetImport": ndfc.routeTargetImport,
      "routeTargetExport": ndfc.routeTargetExport,
      "routeTargetImportEvpn": ndfc.routeTargetImportEvpn,
      "routeTargetExportEvpn": ndfc.routeTargetExportEvpn,
      "routeTargetImportMvpn": dm.import_mvpn_rt | default(ndfc.routeTargetImportMvpn),
      "routeTargetExportMvpn": dm.export_mvpn_rt | default(ndfc.routeTargetExportMvpn),
      "mvpnInterAs": ndfc.mvpnInterAs,
      "trmBGWMSiteEnabled": dm.trm_bgw_msite | default(ndfc.trmBGWMSiteEnabled)
    } }}",
    "vrfId": "{{ ndfc.vrfSegmentId }}",
    "hierarchicalKey": "{{ fabric_name }}",
    "vrfVlanId": "{{ ndfc.vrfVlanId }}",
    "displayName": "{{ ndfc.vrfName }}"
}