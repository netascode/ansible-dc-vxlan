{# Auto-generated NDFC VXLAN EVPN MSD Child Fabric VRF config data structure for fabric {{ current_fabric }} #}
{
    "fabric": "{{ fabric_name }}",
    "vrfName": "{{ vrf_vars.vrfName }}",
    "vrfTemplate": "Default_VRF_Universal",
    "vrfExtensionTemplate": "Default_VRF_Extension_Universal",
    "vrfTemplateConfig": "{{ {
      "asn": vrf_vars.asn,
      "nveId": vrf_vars.nveId,
      "vrfName": vrf_vars.vrfName,
      "vrfSegmentId": vrf_vars.vrfSegmentId,
      "vrfVlanId": vrf_vars.vrfVlanId,
      "vrfVlanName": vrf_vars.vrfVlanName,
      "vrfDescription": vrf_vars.vrfDescription,
      "vrfIntfDescription": vrf_vars.vrfIntfDescription,
      "mtu": vrf_vars.mtu,
      "tag": vrf_vars.tag,
      "vrfRouteMap": vrf_vars.vrfRouteMap,
      "v6VrfRouteMap": vrf_vars.vrfRouteMapV6 if vrf_vars.vrfRouteMapV6 is defined else "",
      "maxBgpPaths": vrf_vars.maxBgpPaths,
      "maxIbgpPaths": vrf_vars.maxIbgpPaths,
      "ipv6LinkLocalFlag": vrf_vars.ipv6LinkLocalFlag,
      "enableL3VniNoVlan": vrf_vars.enableL3VniNoVlan,
      "enableBgpBestPathEcmp": vrf_vars.enableBgpBestPathEcmp,
      "advertiseHostRouteFlag": vrf_vars.adv_host_routes | default(vrf_vars.advertiseHostRouteFlag),
      "advertiseDefaultRouteFlag": vrf_vars.adv_default_routes | default(vrf_vars.advertiseDefaultRouteFlag),
      "configureStaticDefaultRouteFlag": vrf_vars.static_default_route | default(vrf_vars.configureStaticDefaultRouteFlag),
      "bgpPassword": vrf_vars.bgp_password | default(vrf_vars.bgpPassword),
      "bgpPasswordKeyType": vrf_vars.bgp_password_encryption_type | default(vrf_vars.bgpPasswordKeyType),
      "ENABLE_NETFLOW": vrf_vars.enable_netflow | default(vrf_vars.ENABLE_NETFLOW),
      "NETFLOW_MONITOR": vrf_vars.netflow_monitor | default(vrf_vars.NETFLOW_MONITOR) if vrf_vars.enable_netflow else vrf_vars.NETFLOW_MONITOR,
      "trmEnabled": vrf_vars.trm_enable | default(vrf_vars.trmEnabled),
      "loopbackNumber": vrf_vars.rp_loopback_id | default(vrf_vars.loopbackNumber) if ((not vrf_vars.no_rp) or (not vrf_vars.rp_external)) else vrf_vars.loopbackNumber,
      "rpAddress": vrf_vars.rp_address | default(vrf_vars.rpAddress) if not vrf_vars.no_rp else vrf_vars.rpAddress,
      "isRPAbsent": vrf_vars.no_rp | default(vrf_vars.isRPAbsent),
      "isRPExternal": vrf_vars.rp_external | default(vrf_vars.isRPExternal),
      "L3VniMcastGroup": vrf_vars.underlay_mcast_ip | default(vrf_vars.L3VniMcastGroup),
      "multicastGroup": vrf_vars.overlay_multicast_group | default(vrf_vars.multicastGroup) if not vrf_vars.no_rp else vrf_vars.multicastGroup,
      "trmV6Enabled": vrf_vars.trmV6Enabled,
      "rpV6Address": vrf_vars.rpV6Address if vrf_vars.rpV6Address is defined else "",
      "isV6RPAbsent": vrf_vars.isV6RPAbsent,
      "isV6RPExternal": vrf_vars.isV6RPExternal,
      "ipv6MulticastGroup": vrf_vars.ipv6MulticastGroup,
      "disableRtAuto": vrf_vars.disableRtAuto,
      "routeTargetImport": vrf_vars.routeTargetImport,
      "routeTargetExport": vrf_vars.routeTargetExport,
      "routeTargetImportEvpn": vrf_vars.routeTargetImportEvpn,
      "routeTargetExportEvpn": vrf_vars.routeTargetExportEvpn,
      "routeTargetImportMvpn": vrf_vars.import_mvpn_rt | default(vrf_vars.routeTargetImportMvpn),
      "routeTargetExportMvpn": vrf_vars.export_mvpn_rt | default(vrf_vars.routeTargetExportMvpn),
      "mvpnInterAs": vrf_vars.mvpnInterAs,
      "trmBGWMSiteEnabled": vrf_vars.trm_bgw_msite | default(vrf_vars.trmBGWMSiteEnabled)
    } }}",
    "vrfId": "{{ vrf_vars.vrfSegmentId }}",
    "hierarchicalKey": "{{ fabric_name }}",
    "vrfVlanId": "{{ vrf_vars.vrfVlanId }}",
    "displayName": "{{ vrf_vars.displayName }}"
}