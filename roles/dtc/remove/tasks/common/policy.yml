# Copyright (c) 2024 Cisco Systems, Inc. and its affiliates
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# SPDX-License-Identifier: MIT
---

- name: Choose vars_common Based On Fabric Type
  ansible.builtin.set_fact:
    vars_common_local: "{{ vars_common_vxlan }}"
  when: MD_Extended.vxlan.fabric.type == "VXLAN_EVPN"
- ansible.builtin.set_fact:
    vars_common_local: "{{ vars_common_msd }}"
  when: MD_Extended.vxlan.fabric.type == "MSD"
- ansible.builtin.set_fact:
    vars_common_local: "{{ vars_common_isn }}"
  when: MD_Extended.vxlan.fabric.type == "ISN"
- ansible.builtin.set_fact:
    vars_common_local: "{{ vars_common_external }}"
  when: MD_Extended.vxlan.fabric.type == "External"

- block:
  - ansible.builtin.debug: msg="Removing Unmanaged Fabric Policy From Switches. This could take several minutes..."

  - name: Create List of Switch Serial Numbers from NDFC Switch List
    ansible.builtin.set_fact:
      switch_serial_numbers: "{{ switch_list.response.DATA | map(attribute='serialNumber') | list }}"
    delegate_to: localhost

  - name: Build Unmanaged Fabric Policy Payload
    cisco.nac_dc_vxlan.dtc.unmanaged_policy:
      switch_serial_numbers: "{{ switch_serial_numbers }}"
      model_data: "{{ MD_Extended }}"
    register: unmanaged_policy_config
    # do not delegate_to: localhost as this action plugin uses Python to execute cisco.dcnm.dcnm_rest

  - name: Remove Unmanaged NDFC Fabric Policy
    cisco.dcnm.dcnm_policy:
      fabric: "{{ MD_Extended.vxlan.fabric.name }}"
      use_desc_as_key: true
      config: "{{ unmanaged_policy_config.unmanaged_policies }}"
      deploy: true
      state: deleted
    when: unmanaged_policy_config.unmanaged_policies | length > 0
    vars:
        ansible_command_timeout: 3000
        ansible_connect_timeout: 3000
  when:
    - switch_list.response.DATA | length > 0
    - (policy_delete_mode is defined) and (policy_delete_mode is true|bool)

- ansible.builtin.debug:
    msg:
      - "--------------------------------------------------------------------------------------------------------"
      - "+ SKIPPING Remove Unmanaged Policy from Switches task because policy_delete_mode flag is set to False   +"
      - "--------------------------------------------------------------------------------------------------------"
  when: not ((policy_delete_mode is defined) and (policy_delete_mode is true|bool))
