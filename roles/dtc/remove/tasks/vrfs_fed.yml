# Copyright (c) 2024 Cisco Systems, Inc. and its affiliates
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# SPDX-License-Identifier: MIT
---

- ansible.builtin.debug: msg="Removing Unmanaged Fabric VRFs. This could take several minutes..."
  when:
    - switch_list.response.DATA | length > 0
    - (vrf_delete_mode is defined) and (vrf_delete_mode is true|bool)

- name: Get vrf list
  cisco.dcnm.dcnm_rest:
    method: GET
    path: "/appcenter/cisco/ndfc/api/v1/onemanage/top-down/fabrics/{{ MD.vxlan.global.name }}/vrfs"
  register: vrfList

- name: Get vrf attachments list
  cisco.dcnm.dcnm_rest:
      method: GET
      path: /appcenter/cisco/ndfc/api/v1/onemanage/top-down/fabrics/{{ MD.vxlan.global.name }}/vrfs/attachments
  register: vrfAttachmentList

- name: Filter vrf attachments to be removed
  cisco.nac_dc_vxlan.dtc.fed_overlay_check:
    model_data: "{{ MD_Extended }}"
    ndfc_data: "{{ vrfAttachmentList.response.DATA }}"
    check_type: "vrf_attach"
    switch_data: "{{ switch_list.response.DATA }}"
  register: not_required_vrf_attachments

- name: Remove vrf attachments
  cisco.dcnm.dcnm_rest:
      method: POST
      path: /appcenter/cisco/ndfc/api/v1/onemanage/top-down/fabrics/{{ MD.vxlan.global.name }}/vrfs/attachments
      json_data: "{{ not_required_vrf_attachments.payload | to_json }}"
  register: vrf_attachment_result
  when:
    - switch_list.response.DATA | length > 0
    - (vrf_delete_mode is defined) and (vrf_delete_mode is true|bool)

- name: Filter vrfs to be removed
  cisco.nac_dc_vxlan.dtc.fed_overlay_check:
    model_data: "{{ MD_Extended }}"
    ndfc_data: "{{ vrfList.response.DATA }}"
    check_type: "vrf"
    switch_data: "{{ switch_list.response.DATA }}"
  register: not_required_vrfs

- name: Remove vrfs
  cisco.dcnm.dcnm_rest:
      method: DELETE
      path: /appcenter/cisco/ndfc/api/v1/onemanage/top-down/fabrics/{{ MD.vxlan.global.name }}/bulk-delete/vrfs?vrf-names={{ not_required_vrfs.payload | join(',') }}
  register: network_attachment_result
  when:
    - switch_list.response.DATA | length > 0
    - not_required_vrfs.payload | length > 0    
    - (vrf_delete_mode is defined) and (vrf_delete_mode is true|bool)


- ansible.builtin.debug:
    msg:
      - "--------------------------------------------------------------------------------------------------------"
      - "+ SKIPPING Remove Unmanaged Fabric VRFs task because vrf_delete_mode flag is set to False   +"
      - "--------------------------------------------------------------------------------------------------------"
  when: not ((vrf_delete_mode is defined) and (vrf_delete_mode is true|bool))
