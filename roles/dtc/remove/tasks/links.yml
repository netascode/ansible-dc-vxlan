# Copyright (c) 2024 Cisco Systems, Inc. and its affiliates
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# SPDX-License-Identifier: MIT
---

- ansible.builtin.debug: msg="Removing Unmanaged vpc peer Links. This could take several minutes..."
  when:
    - switch_list.response.DATA | length > 0
    - (link_vpc_delete_mode is defined) and (link_vpc_delete_mode is true|bool)

- name: Remove Intra Fabric Links for vPC Peering
  cisco.dcnm.dcnm_links:
    state: replaced
    src_fabric: "{{ MD_Extended.vxlan.global.name }}"
    config: "{{ link_vpc_peering }}"
  vars:
      ansible_command_timeout: 3000
      ansible_connect_timeout: 3000
  when:
    - switch_list.response.DATA | length > 0
    - (link_vpc_delete_mode is defined) and (link_vpc_delete_mode is true|bool)
- block:
  - ansible.builtin.debug: msg="Removing Unmanaged Fabric Links. This could take several minutes..."

  - name: Query Links - with Src & Dst Fabric
    cisco.dcnm.dcnm_links:
      state: query # choose from [merged, replaced, deleted, query]
      src_fabric: "{{ MD.vxlan.global.name }}"
      config:
        - dst_fabric: "{{ MD.vxlan.global.name }}" # Destination fabric
    register: result_links

  - name: Create empty result List
    ansible.builtin.set_fact:
      required_links: []

  - name: Create a list of links that already exist
    cisco.nac_dc_vxlan.dtc.links_filter_and_remove:
      existing_links: "{{ result_links.response }}"
      fabric_links: "{{ fabric_links }}"
    register: links_to_be_removed
    when: result_links.response is defined    

  # do not delegate_to: localhost as this action plugin uses Python to execute cisco.dcnm.dcnm_rest
  - name: Set not_required_links if result_links.response is not defined
    ansible.builtin.set_fact:
      links_to_be_removed: []
    when: result_links.response is not defined 
  # --------------------------------------------------------------------
  # Manage VRF Configuration on NDFC
  # --------------------------------------------------------------------
  - name: Manage NDFC Fabric Links
    cisco.dcnm.dcnm_links:
      src_fabric: "{{ MD.vxlan.global.name }}"
      config: "{{ links_to_be_removed['links_to_be_removed'] }}"
      deploy: false
      state: deleted
    register: delete_fabric_links_result  

  when:
    - switch_list.response.DATA | length > 0
    - (link_fabric_delete_mode is defined) and (link_fabric_delete_mode is true|bool)
