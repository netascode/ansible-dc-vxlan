# Copyright (c) 2024 Cisco Systems, Inc. and its affiliates
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# SPDX-License-Identifier: MIT

---

- name: Manage Fabric Interfaces Entry Point
  ansible.builtin.debug:
    msg:
      - "----------------------------------------------------------------"
      - "+     Manage Fabric Interfaces {{ MD.vxlan.global.name }}"
      - "----------------------------------------------------------------"

# --------------------------------------------------------------------
# Manage Interface Access Portchannel Configuration on NDFC
# --------------------------------------------------------------------

- name: Manage Access Portchannel Interface
  cisco.dcnm.dcnm_interface:
    fabric: "{{ MD.vxlan.global.name }}"
    state: replaced
    config: "{{ interface_access_po }}"
  when: MD_Extended.vxlan.topology.interfaces.modes.access_po.count > 0

# --------------------------------------------------------------------
# Manage Interface Trunk Portchannel Configuration on NDFC
# --------------------------------------------------------------------

- name: Manage Trunk Portchannel Interface
  cisco.dcnm.dcnm_interface:
    fabric: "{{ MD.vxlan.global.name }}"
    state: replaced
    config: "{{ interface_trunk_po }}"
  when: MD_Extended.vxlan.topology.interfaces.modes.trunk_po.count > 0

# --------------------------------------------------------------------
# Manage Interface Routed Configuration on NDFC
# --------------------------------------------------------------------

- name: Manage Interface Routed
  cisco.dcnm.dcnm_interface:
    fabric: "{{ MD.vxlan.global.name }}"
    state: replaced
    config: "{{ interface_routed }}"
  when: MD_Extended.vxlan.topology.interfaces.modes.routed.count > 0

# --------------------------------------------------------------------
# Manage Sub-interface Routed Configuration on NDFC
# --------------------------------------------------------------------

- name: Manage Sub-interface Routed
  cisco.dcnm.dcnm_interface:
    fabric: "{{ MD.vxlan.global.name }}"
    state: replaced
    config: "{{ sub_interface_routed }}"
  when: MD_Extended.vxlan.topology.interfaces.modes.routed_sub.count > 0

# --------------------------------------------------------------------
# Manage interface Port-Channel Routed Configuration on NDFC
# --------------------------------------------------------------------

- name: Manage Interface Port-Channel Routed
  cisco.dcnm.dcnm_interface:
    fabric: "{{ MD.vxlan.global.name }}"
    state: replaced
    config: "{{ interface_po_routed }}"
  when: MD_Extended.vxlan.topology.interfaces.modes.routed_po.count > 0

# --------------------------------------------------------------------
# Manage interface Loopback Configuration on NDFC
# --------------------------------------------------------------------

- name: Manage NDFC Fabric Loopback
  cisco.dcnm.dcnm_interface:
    fabric: "{{ MD.vxlan.global.name }}"
    state: replaced
    config: "{{ int_loopback_config }}"
  when: MD_Extended.vxlan.topology.interfaces.modes.loopback.count > 0

  # --------------------------------------------------------------------
# Manage Interface Trunk Configuration on NDFC
# --------------------------------------------------------------------

- name: Manage Interface Trunk
  cisco.dcnm.dcnm_interface:
    fabric: "{{ MD.vxlan.global.name }}"
    state: replaced
    config: "{{ interface_trunk }}"
  when: MD_Extended.vxlan.topology.interfaces.modes.trunk.count > 0

# --------------------------------------------------------------------
# Manage Interface Access Routed Configuration on NDFC
# --------------------------------------------------------------------

- name: Manage Interface Access
  cisco.dcnm.dcnm_interface:
    fabric: "{{ MD.vxlan.global.name }}"
    state: replaced
    config: "{{ interface_access }}"
  when: MD_Extended.vxlan.topology.interfaces.modes.access.count > 0

# --------------------------------------------------------------------
# Manage interface vPC Configuration on NDFC
# --------------------------------------------------------------------

- name: Manage NDFC Fabric vPCs
  cisco.dcnm.dcnm_interface:
    fabric: "{{ MD.vxlan.global.name }}"
    state: replaced
    config: "{{ interface_vpc }}"
  when: MD_Extended.vxlan.topology.interfaces.modes.access_vpc.count > 0 or MD_Extended.vxlan.topology.interfaces.modes.trunk_vpc.count > 0

## Will discuss with team and switchover to the below code and remove the above code
# # --------------------------------------------------------------------
# # Manage Interface All Configuration on NDFC
# # --------------------------------------------------------------------

# - name: Manage Interface All
#   cisco.dcnm.dcnm_interface:
#     fabric: "{{ MD.vxlan.global.name }}"
#     state: replaced
#     config: "{{ interface_all }}"
#   vars:
#       ansible_command_timeout: 3000
#       ansible_connect_timeout: 3000
#   when: MD_Extended.vxlan.topology.interfaces.modes.all.count > 0
#   delegate_to: localhost
