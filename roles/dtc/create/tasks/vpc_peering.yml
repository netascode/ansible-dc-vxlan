---

- name: Manage Interfaces for vPC Peering
  cisco.dcnm.dcnm_interface:
    fabric: "{{ MD.fabric.global.name }}"
    state: query
    config: "{{ interface_vpc_peering }}"
  register: interface_vpc_peering_query

- name: Get Interfaces Not Associated to vPC Peering Policy
  ansible.builtin.set_fact:
    interface_not_vpc_peering: "{{ interface_vpc_peering_query.response | community.general.json_query(vpc_peer_policy_query) }}"
  vars:
    vpc_peer_policy_query: "[?(@.policy!=`int_vpc_peer_link_po_member_11_1`)]"

- name: Generate Config Payload Update for Interfaces Not Associated to vPC Peering Policy
  ansible.builtin.set_fact:
    interface_vpc_peering_payload: "{{ lookup('template', 'ndfc_interface_vpc_peer_link.j2') }}"
  when: interface_not_vpc_peering | length > 0

- name: Manage Interfaces for vPC Peering
  cisco.dcnm.dcnm_interface:
    fabric: "{{ MD.fabric.global.name }}"
    state: replaced
    config: "{{ interface_vpc_peering_payload | from_yaml }}"
    # config:
    #   - name: "{{ item.interfaces[0].ifName }}"
    #     type: eth
    #     switch: 
    #       - "{{ MD.fabric.topology.switches | community.general.json_query(switch_hostname_query) | first }}"
    #     profile:
    #       admin_state: true
    #       mode: trunk
    deploy: true
  vars:
      ansible_command_timeout: 3000
      ansible_connect_timeout: 3000
  when: interface_not_vpc_peering | length > 0
  # vars:
  #   switch_interface_name: "{{ item.interfaces[0].ifName }}"
  #   switch_hostname_query: "[?(@.serial_number=='{{ item.interfaces[0].serialNumber }}')].name"
  # loop: "{{ not_int_vpc_peering }}"


- name: "create VPC peer"
  cisco.dcnm.dcnm_vpc_pair:
    src_fabric: "{{ MD.fabric.global.name }}"
    deploy: false
    state: replaced
    config: "{{ vpc_peering }}"
