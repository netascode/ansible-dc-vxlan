# Copyright (c) 2024 Cisco Systems, Inc. and its affiliates
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# SPDX-License-Identifier: MIT

---

- name: Manage VRFs and Networks Entry Point
  ansible.builtin.debug:
    msg:
      - "----------------------------------------------------------------"
      - "+     Manage VRFs and Networks Fabric {{ MD_Extended.vxlan.fabric.name }}"
      - "----------------------------------------------------------------"

# cisco.nac_dc_vxlan.dtc.prepare_msite_data is called after cisco.nac_dc_vxlan.dtc.manage_child_fabrics
# so that we have child fabric state from the MSD instance (or Federated MSD instance). This state includes
# each child fabric's attributes and switches. This data is used to build the VRF and Network configuration.
# Given that the MSD instance is the source of truth for the child fabric state, we cannot pre-process all the
# VRFs and Networks data in the dtc.common role. We must wait until the child fabric state is available.
# The first availability of the child fabric state for VRFs and Networks is here, but we still need to pre-process
# the VRFs and Networks data before we can build the configuration. 
# While not ideal and while this is not done directly in the common role, maintaining our pre-processing file strucutre can
# be done by importing specific tasks files from dtc.common here. This is done in the two following tasks for VRFs and Networks.
# Once done, the deteced state changes are added to the vars_common_msd dictionary initially created in dtc.common when
# pre-processing is done for the MSD fabric itself (and child fabrics when functionality is added).

# The import_role tasks were removed due to a bug in ansible-core 2.16.5 not finding the role and tasks_from file whereas ansible-core 2.17.8+ works.
# - name: Run dtc.common.tasks.msd.ndfc_vrfs.yml
#   ansible.builtin.import_role:
#     name: dtc.common
#     tasks_from: msd/ndfc_vrfs.yml

# - name: Run dtc.common.tasks.msd.ndfc_networks.yml
#   ansible.builtin.import_role:
#     name: dtc.common
#     tasks_from: msd/ndfc_networks.yml

- name: Run dtc.common.tasks.msd.ndfc_vrfs.yml
  ansible.builtin.import_tasks: "{{ role_path }}/../common/tasks/msd/ndfc_vrfs.yml"

- name: Run dtc.common.tasks.msd.ndfc_networks.yml
  ansible.builtin.import_tasks: "{{ role_path }}/../common/tasks/msd/ndfc_networks.yml"

# --------------------------------------------------------------------
# Update Local Variables To NameSpace Dict For Use Elsewhere
# --------------------------------------------------------------------
- name: Update Local Variables With Namespace Context
  ansible.builtin.set_fact:
    vars_common_msd: "{{ vars_common_msd | ansible.builtin.combine(update_data) }}"
  vars:
    update_data:
        changes_detected_vrfs: "{{ changes_detected_vrfs }}"
        changes_detected_networks: "{{ changes_detected_networks }}"
        vrf_config: "{{ vrf_config }}"
        net_config: "{{ net_config }}"
        # Check with Matt and Pete on how to handle this for MSD
        # vrf_attach_config: "{{ vrf_attach_config }}"

- name: Run Diff Flags
  ansible.builtin.debug:
    msg:
      - "----------------------------------------------------------------"
      - "+     Fabric Changes Detected -               [ {{ vars_common_msd.changes_detected_fabric }} ]"
      - "+     VRFs Changes Detected -                 [ {{ vars_common_msd.changes_detected_vrfs }} ]"
      - "+     Networks Changes Detected -             [ {{ vars_common_msd.changes_detected_networks }} ]"
      - "+     ----- Run Map -----"
      - "+     Run Map Diff Run -                      [ {{ run_map_read_result.diff_run }} ]"
      - "+     Force Run Flag  -                       [ {{ force_run_all }} ]"
      - "----------------------------------------------------------------"

# With the VRFs and Networking pre-processed, we can now send the configuration for the MSD fabric to NDFC
# based on the detected changes. This is done in the following tasks.

# --------------------------------------------------------------------
# Manage VRF Configuration on NDFC
# --------------------------------------------------------------------
# The cisco.dcnm.dcnm_vrf module works for MSD fabrics to create and update VRFs.
- name: Manage NDFC MSD Fabric VRFs
  cisco.dcnm.dcnm_vrf:
    fabric: "{{ MD_Extended.vxlan.fabric.name }}"
    state: replaced
    config: "{{ vars_common_msd.vrf_config }}"
  register: manage_vrf_result
  when:
    - MD_Extended.vxlan.multisite.overlay.vrfs is defined
    - MD_Extended.vxlan.multisite.overlay.vrfs
    - vars_common_msd.changes_detected_vrfs

- name: Manage NDFC Child Fabric VRFs
  cisco.nac_dc_vxlan.dtc.manage_child_fabric_vrfs:
    msite_data: "{{ MD_Multisite}}"

# --------------------------------------------------------------------
# Manage Loopback VRF attachments on NDFC
# --------------------------------------------------------------------

# Check with Matt and Pete on how we want to handle this for MSD
# - name: Attach VRF Loopbacks per VRF
#   cisco.dcnm.dcnm_rest:
#     path: "/appcenter/cisco/ndfc/api/v1/lan-fabric/rest/top-down/v2/fabrics/{{ MD_Extended.vxlan.fabric.name }}/vrfs/attachments"
#     method: "POST"
#     json_data: "{{ vars_common_msd.vrf_attach_config | to_json}}"
#   when:
#     - MD_Extended.vxlan.overlay.vrfs is defined
#     - MD_Extended.vxlan.overlay.vrfs
#     - vars_common_msd.changes_detected_vrfs

# --------------------------------------------------------------------
# Manage Network Configuration on NDFC
# --------------------------------------------------------------------
- name: Manage NDFC MSD Fabric Networks
  cisco.dcnm.dcnm_network:
    fabric: "{{ MD_Extended.vxlan.fabric.name }}"
    state: replaced
    config: "{{ vars_common_msd.net_config }}"
  register: manage_network_result
  when:
    - MD_Extended.vxlan.multisite.overlay.networks is defined
    - MD_Extended.vxlan.multisite.overlay.networks
    - vars_common_msd.changes_detected_networks

# - name: Manage NDFC Child Fabric Networks
#   cisco.nac_dc_vxlan.dtc.manage_child_fabric_networks:
#     msite_data: "{{ MD_Multisite}}"
