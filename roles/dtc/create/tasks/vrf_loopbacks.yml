# Copyright (c) 2024 Cisco Systems, Inc. and its affiliates
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# SPDX-License-Identifier: MIT

---
- name: Manage VRFs and Networks Entry Point
  ansible.builtin.debug:
    msg:
      - "----------------------------------------------------------------"
      - "+     Manage VRFs and Networks Fabric {{ MD.vxlan.global.name }}"
      - "----------------------------------------------------------------"

# --------------------------------------------------------------------
# Manage VRF Configuration on NDFC
# --------------------------------------------------------------------

- name: Set file_name Var
  ansible.builtin.set_fact:
    file_name: "{{vrf.name}}_{{ MD.vxlan.global.name }}_attach_vrfs_loopbacks.yml"
  delegate_to: localhost

- name: Stat Previous File If It Exists
  ansible.builtin.stat:
    path: "{{ role_path }}/../common/files/{{ file_name }}"
  register: data_file_previous
  delegate_to: localhost

- name: Set vrf_loopback_config Var
  ansible.builtin.set_fact:
    vrf_loopback_config: "{{ lookup('file', role_path + '/../common/files/' + file_name) | from_json }}"
  when: (MD_Extended.vxlan.overlay_services.vrfs | default([])) | length > 0 and data_file_previous.stat.exists
  delegate_to: localhost

- name: Create complete payload for attaching VRF to Switches.
  set_fact:
    attach_payload: "{{ attach_payload | default([]) +  [{'vrfName':vrf.name, 'lanAttachList':vrf_loopback_config}]}}"

- name: Call API to attach VRF to Leaf Switches
  cisco.dcnm.dcnm_rest:
    path: "/appcenter/cisco/ndfc/api/v1/lan-fabric/rest/top-down/v2/fabrics/{{ MD.vxlan.global.name }}/vrfs/attachments"
    method: "POST"
    json_data: "{{ attach_payload | to_json}}"
  when: MD.vxlan.global.fabric_type != 'MFD'

- name: Call API to attach VRF to Leaf Switches for Federated NDFCs
  cisco.dcnm.dcnm_rest:
    path: "/appcenter/cisco/ndfc/api/v1/onemanage/top-down/fabrics/{{ MD.vxlan.global.name }}/vrfs/attachments"
    method: "POST"
    json_data: "{{ attach_payload | to_json}}"
  when: MD.vxlan.global.fabric_type == 'MFD'

- name: Clear payload
  set_fact:
    vrf_loopback_config: []
    attach_payload: []
    switches: []
    attach_list: []
