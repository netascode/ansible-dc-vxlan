# Copyright (c) 2024 Cisco Systems, Inc. and its affiliates
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# SPDX-License-Identifier: MIT

---
- name: Role Entry Point - [cisco.nac_dc_vxlan.validate]
  ansible.builtin.debug:
    msg:
      - "----------------------------------------------------------------"
      - "+     Calling Role - [cisco.nac_dc_vxlan.validate]             +"
      - "----------------------------------------------------------------"

- ansible.builtin.debug: msg="Role Path - {{ role_path }}"

- ansible.builtin.debug: msg="Inventory Directory - {{ inventory_dir }}"

- name: Validate NDFC Service Model Data
  ansible.builtin.debug: msg="Calling Role Validate - nac_dc_vxlan.validate"

- ansible.builtin.debug: msg="Workflow is Direct to Device (DTD)"
  when: hostvars[inventory_hostname]['ansible_network_os'] == "cisco.nxos.nxos"

- ansible.builtin.debug: msg="Workflow is Direct to Controller (DTC)"
  when: hostvars[inventory_hostname]['ansible_network_os'] == "cisco.dcnm.dcnm"

- name: Check for Schema Path Being Defined
  ansible.builtin.set_fact:
    schema_path: ''
  when: schema_path is not defined
  delegate_to: localhost

- name: Check for Enhanced Roles Path Being Defined
  ansible.builtin.set_fact:
    enhanced_rules_path: ''
  when: enhanced_rules_path is not defined
  delegate_to: localhost

- name: Perform Required Syntax and Semantic Model Validation
  cisco.nac_dc_vxlan.common.nac_dc_validate:
    schema: "{{ schema_path }}"
    mdata: "{{ data_path }}"
    rules: "{{ rules_path }}"
  register: model_data
  vars:
    data_path: "{{ inventory_dir }}/host_vars/{{ inventory_hostname }}"
    rules_path: "{{ role_path }}/files/rules/required_rules/"
  delegate_to: localhost

- name: Perform Enhanced Syntax and Semantic Model Validation
  cisco.nac_dc_vxlan.common.nac_dc_validate:
    schema: "{{ schema_path }}"
    mdata: "{{ data_path }}"
    rules: "{{ enhanced_rules_path }}"
  vars:
    data_path: "{{ inventory_dir }}/host_vars/{{ inventory_hostname }}"
  delegate_to: localhost

- name: Verify Connection to NDFC {{ ansible_host }} on Port {{ ansible_httpapi_port | default(443) }}
  ansible.builtin.include_tasks: verify_ndfc_connectivity.yml

- name: Verify Authorization to NDFC {{ ansible_host }} on Port {{ ansible_httpapi_port | default(443) }}
  ansible.builtin.include_tasks: verify_ndfc_authorization.yml

- name: Prepare Service Model
  cisco.nac_dc_vxlan.common.prepare_service_model:
    inventory_hostname: "{{ inventory_hostname }}"
    hostvars: "{{ hostvars }}"
    model_data: "{{ model_data['data'] }}"
  register: smd
  delegate_to: localhost

- name: Store Golden Service Model Data
  ansible.builtin.set_fact:
    MD: "{{ smd['model_golden'] }}"
  delegate_to: localhost

- name: Store Extended Service Model Data
  ansible.builtin.set_fact:
    MD_Extended: "{{ smd['model_extended'] }}"
  delegate_to: localhost

- name: Check Roles
  cisco.nac_dc_vxlan.common.check_roles:
    role_list: "{{ role_names }}"
  register: check_roles
  delegate_to: localhost

- name: Manage Previous Service Model Data Files
  ansible.builtin.include_tasks: manage_model_files_previous.yml
  when: check_roles['save_previous']

- name: Manage Current Service Model Data Files
  ansible.builtin.include_tasks: manage_model_files_current.yml
  when: check_roles['save_previous']

- name: Stat Host Specific Defaults
  ansible.builtin.stat: path="{{ role_path }}/defaults/{{ inventory_hostname }}/defaults.yml"
  register: host_defaults
  delegate_to: localhost

- name: Include Host Specific Defaults if Available
  ansible.builtin.include_vars:
    file: "{{ role_path }}/defaults/{{ inventory_hostname }}/defaults.yml"
  when: host_defaults.stat.exists
  delegate_to: localhost